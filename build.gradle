// Top-level build file where you can add configuration options common to all sub-projects/modules.
subprojects {
    afterEvaluate { project ->
        if (project.hasProperty("android")) {
            android {
                compileSdkVersion 22
                buildToolsVersion '22.0.1'
            }
        }
    }
}
subprojects {
    afterEvaluate { projects ->
        if (projects.hasProperty("android")) {
            android {
                compileSdkVersion versions.compileSdkVersion
                buildToolsVersion versions.buildToolsVersion
                defaultConfig {
                    minSdkVersion versions.minSdkVersion
                    targetSdkVersion versions.targetSdkVersion
                    resConfigs("en")
                    testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
                    javaCompileOptions {
                        annotationProcessorOptions {
                            includeCompileClasspath true
                        }
                    }
                    multiDexEnabled true

                }
                compileOptions {
                    sourceCompatibility = JavaVersion.VERSION_1_8
                    targetCompatibility = JavaVersion.VERSION_1_8
                }

                buildTypes {
                    qa {
                        Properties properties = new Properties()
                        properties.load(project.rootProject.file("local.properties").newDataInputStream())
                        def baseUrl = properties.getProperty("base_url")
                        def apikey = properties.getProperty("api_key")
                        buildConfigField 'String', "API_KEY", apikey
                        buildConfigField 'String', "BASE_URL", baseUrl

                    }
                    debug{
                        Properties properties = new Properties()
                        properties.load(project.rootProject.file("local.properties").newDataInputStream())
                        def baseUrl = properties.getProperty("base_url")
                        def apikey = properties.getProperty("api_key")
                        buildConfigField 'String', "KEY", apikey
                        buildConfigField 'String', "BASE_URL", baseUrl

                    }
                    release{
                        Properties properties = new Properties()
                        properties.load(project.rootProject.file("local.properties").newDataInputStream())
                        def baseUrl = properties.getProperty("base_url")
                        def apikey = properties.getProperty("api_key")
                        buildConfigField 'String', "KEY", apikey
                        buildConfigField 'String', "BASE_URL", baseUrl

                    }
                }
            }
        }
    }
}
buildscript {
    ext.kotlin_version = '1.3.50'

    ext.versions = [

            //android config
            'compileSdkVersion'      : 29,
            'minSdkVersion'          : 16,
            'targetSdkVersion'       : 29,
            'buildToolsVersion'      : "29.0.1",
            'versionCode'            : 1,
            'versionName'            : "1.0",
            'applicationId'          : "com.chetan.assignments",

            //ui
            'fragment'               : "1.1.0-rc03",
            'navigation'             : "2.1.0-beta02",
            'supportLibVersion'      : '1.0.0',
            'constraintLayoutVersion': '1.1.3',


            //kotlin
            'kotlin_version'         : '1.3.50',
            'kotlin_core'            : '1.1.0',
            'kotlin_gradle'          : '1.3.50',

            //testing
            'mockitoKotlin'          : "2.1.0",
            'junit'                  : "4.12",
            'junitAndroid'           : "1.1.1",
            'arch'                   : '2.0.0',
            'robolectric'            : "4.3",
            'fragmentTest'           : '1.1.0-rc03',
            'espressoCore'           : '3.1.0',
            'bindingMapper'          : '1.0.0-alpha1',


            //tools
            'stetho'                 : '1.5.1',
            'timberVersion'          : '4.7.1',


            'dagger'                 : '2.24',


            'androidPlugin'          : '3.5.1',
            'googleServices'         : '4.2.0',

            'agv'                    : '0.4.9',

            'androidxArchVersion'    : '2.2.0-alpha02',

            'coroutines'             : '1.3.0-M1',

            'roomDbVersion'          : '2.1.0-alpha07',
            'pagingVersion'          : '2.1.0',
            'glide'                  : '4.8.0',


            //networking
            'gson'                   : '2.8.5',
            'retrofit'               : '2.6.1',
            'okhttp'                 : '4.2.1',
            'coroutineAdapter'       : '0.9.2',


    ]
    ext.deps = [

            kotlin                        : [
                    'kotlinstdlib': "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${versions.kotlin_version}",
                    'gradlePlugin': "org.jetbrains.kotlin:kotlin-gradle-plugin:${versions.kotlin_gradle}",
            ],
            plugins                       : [
                    'detekt'        : "io.gitlab.arturbosch.detekt",
                    'googleServices': "com.google.gms:google-services:${versions.googleServices}"


            ],
            network                       : [
                    'gson'         : "com.google.code.gson:gson:${versions.gson}",
                    'retrofit'     : "com.squareup.retrofit2:retrofit:${versions.retrofit}",
                    'okhttpLogging': "com.squareup.okhttp3:logging-interceptor:${versions.okhttp}",
                    'convertorGson': "com.squareup.retrofit2:converter-gson:${versions.retrofit}",
                    'retrofitMock' : "com.squareup.retrofit2:retrofit-mock:${versions.retrofit}",
                    'okhttp'       : "com.squareup.okhttp3:okhttp:${versions.okhttp}"
            ],
            android                       : [
                    'gradlePlugin': "com.android.tools.build:gradle:${versions.androidPlugin}"
            ],
            gladed                        : [
                    'androidgitversion': "com.gladed.androidgitversion:gradle-android-git-version:${versions.agv}"
            ],

            dagger                        : [
                    'daggerRuntime'       : "com.google.dagger:dagger:${versions.dagger}",
                    'daggerAndroidRuntime': "com.google.dagger:dagger-android-support:${versions.dagger}",
                    'daggerCompiler'      : "com.google.dagger:dagger-compiler:${versions.dagger}",
                    'daggerProcessor'     : "com.google.dagger:dagger-android-processor:${versions.dagger}"
            ],

            ui                            : [
                    'appcompact'      : "androidx.appcompat:appcompat:${versions.supportLibVersion}",
                    'fragment'        : "androidx.fragment:fragment-ktx:${versions.fragment}",
                    'navigation'      : "androidx.navigation:navigation-fragment-ktx:${versions.navigation}",
                    'constraintlayout': "androidx.constraintlayout:constraintlayout:${versions.constraintLayoutVersion}",
                    'material'        : "com.google.android.material:material:${versions.supportLibVersion}"
            ],
            lifeCycleArchitectureComponent: [
                    'lifecycleExtension'   : "androidx.lifecycle:lifecycle-extensions:${versions.androidxArchVersion}",
                    'lifecycleRuntime'     : "androidx.lifecycle:lifecycle-runtime:${versions.androidxArchVersion}",
                    'lifecycleCompiler'    : "androidx.lifecycle:lifecycle-compiler:${versions.androidxArchVersion}",
                    'lifecycleViewModelKtx': "androidx.lifecycle:lifecycle-viewmodel-ktx:${versions.androidxArchVersion}",
                    'livedataKtx'          : "androidx.lifecycle:lifecycle-livedata-ktx:${versions.androidxArchVersion}",

            ],
            coroutine                     : [
                    'coroutineCore'   : "org.jetbrains.kotlinx:kotlinx-coroutines-core:${versions.coroutines}",
                    'coroutineAndroid': "org.jetbrains.kotlinx:kotlinx-coroutines-android:${versions.coroutines}",
                    'coroutineAdapter': "com.jakewharton.retrofit:retrofit2-kotlin-coroutines-adapter:${versions.coroutineAdapter}"
            ],
            room                          : [
                    'roomRuntime' : "androidx.room:room-runtime:${versions.roomDbVersion}",
                    'roomCompiler': "androidx.room:room-compiler:${versions.roomDbVersion}",
                    'roomKtx'     : "androidx.room:room-ktx:${versions.roomDbVersion}",
                    'roomTesting' : "androidx.room:room-testing:${versions.roomDbVersion}"
            ],
            pagging                       : [
                    'paggingRuntime': "androidx.paging:paging-runtime:${versions.pagingVersion}",
                    'pagingKtx'     : "androidx.paging:paging-runtime-ktx:${versions.pagingVersion}",
                    'pagingCommon'  : "androidx.paging:paging-rxjava2:${versions.pagingVersion}"
            ],



            androidTest                   : [
                    'espressoCore': "androidx.test.espresso:espresso-core:${versions.espressoCore}",
                    'archCore'    : "androidx.arch.core:core-testing:${versions.arch}",
            ],

            test                          : [
                    'junit'        : "junit:junit:${versions.junit}",
                    'junitAndroid' : "androidx.test.ext:junit:${versions.junitAndroid}",
                    'robolectric'  : "org.robolectric:robolectric:${versions.robolectric}",
                    'mockito'      : "com.nhaarman.mockitokotlin2:mockito-kotlin:${versions.mockitoKotlin}",
                    'fragment'     : "androidx.fragment:fragment-testing:${versions.fragmentTest}",
                    'bindingMapper': "com.github.annypatel.databinding:binding-mapper:${versions.bindingMapper}",

            ],
            tools                         : [
                    'timber'      : "com.jakewharton.timber:timber:${versions.timberVersion}",
                    'stetho'      : "com.facebook.stetho:stetho:${versions.stetho}",
                    'stethoOkhttp': "com.facebook.stetho:stetho:${versions.stetho}"
            ],
            glide                         : [
                    runtime: "com.github.bumptech.glide:glide:${versions.glide}",
                    compile: "com.github.bumptech.glide:compiler:${versions.glide}"
            ]

    ]
    repositories {
        google()
        jcenter()
        maven {
            url {
                "https://plugins.gradle.org/m2/"
            }
        }
    }
    dependencies {
        classpath deps.android.gradlePlugin
        classpath deps.kotlin.gradlePlugin
        classpath deps.gladed.androidgitversion
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"

    }
}


allprojects {
    repositories {
        google()
        jcenter()
        maven {
            url {
                'https://maven.google.com/'
            }
        }
        mavenCentral()
    }
}
task clean(type: Delete) {
    delete rootProject.buildDir
}
